import os
from dataclasses import dataclass, field
from typing import Optional

from transformers import TrainingArguments


@dataclass
class ModelArguments:
    """
    Arguments pertaining to which model/config/tokenizer we are going to fine-tune from.
    """

    bge_model_name_or_path: str = field(
        metadata={"help": "Path to pretrained BGE model or model identifier from huggingface.co/models"}
    )
    visual_model_name_or_path: str = field(
        metadata={"help": "Path to pretrained visual model or model identifier"}
    )
    config_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained config name or path if not the same as model_name"}
    )
    tokenizer_name: Optional[str] = field(
        default=None, metadata={"help": "Pretrained tokenizer name or path if not the same as model_name"}
    )
    cache_dir: Optional[str] = field(
        default=None, metadata={"help": "Where do you want to store the pretrained models downloaded from s3"}
    )
    train_vision_tower: bool = field(
        default=True, metadata={"help": "Whether to train the vision tower"}
    )
    train_text_tower: bool = field(
        default=True, metadata={"help": "Whether to train the text tower"}
    )
    custom_train_vision_tower: Optional[int] = field(
        default=None, metadata={"help": "Number of vision tower layers to train"}
    )


@dataclass
class DataArguments:
    loss_fn: str = field(default='triplet', metadata={"help": "train loss"})
    margin: float=field(default=0.5, metadata={"help": "margin"})
    is_suploss: bool=field(default=False, metadata={"help": "sup loss"})
    train_data: str = field(
        default=None, metadata={"help": "Path to train data"}
    )
    train_data_image: str = field(
        default=None, metadata={"help": "Path to training image directory"}
    )
    train_group_size: int = field(default=5)

    # query_max_len: int = field(
    #     default=32,
    #     metadata={
    #         "help": "The maximum total input sequence length after tokenization for query. Sequences longer "
    #                 "than this will be truncated, sequences shorter will be padded."
    #     },
    # )

    # passage_max_len: int = field(
    #     default=128,
    #     metadata={
    #         "help": "The maximum total input sequence length after tokenization for passage. Sequences longer "
    #                 "than this will be truncated, sequences shorter will be padded."
    #     },
    # )

    # max_example_num_per_dataset: int = field(
    #     default=100000000, metadata={"help": "The max number of examples for each dataset"}
    # )

    # query_instruction_for_retrieval: str = field(
    #     default=None, metadata={"help": "Instruction for query"}
    # )
    # passage_instruction_for_retrieval: str = field(
    #     default=None, metadata={"help": "Instruction for passage"}
    # )

    def __post_init__(self):
        if not os.path.exists(self.train_data):
            raise FileNotFoundError(f"Cannot find file: {self.train_data}, please set a true path")
        if not os.path.exists(self.train_data_image):
            raise FileNotFoundError(f"Cannot find directory: {self.train_data_image}, please set a true path")


@dataclass
class RetrieverTrainingArguments(TrainingArguments):
    stage: int = field(default=2, metadata={"help": "train stage"})
    negatives_cross_device: bool = field(default=True, metadata={"help": "Share negatives across devices"})
    temperature: Optional[float] = field(default=0.02)
    fix_position_embedding: bool = field(default=False, metadata={"help": "Freeze the parameters of position embeddings"})
    sentence_pooling_method: str = field(default='cls', metadata={"help": "The pooling method, should be cls or mean"})
    normlized: bool = field(default=True)
    # use_inbatch_neg: bool = field(default=True, metadata={"help": "Use passages in the same batch as negatives"})
    resume_path: Optional[str] = field(default=None, metadata={"help": "Path to resume training from checkpoint"})